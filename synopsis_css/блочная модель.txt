отцентровать элемент:
  margin-left: auto;
  margin-right: auto;
--------------------------------------------------------------------------------------------
box-sizing задает не ширину содержания, а общую ширину!
Это свойство имеет два значения:
	content-box — значение по умолчанию, соответствует стандартной блочной модели.
	border-box — изменяет режим расчёта ширины элемента на описанный выше: теперь ширина элемента включает и рамку, и внутренние отступы и, собственно, ширину содержания самого элемента.
--------------------------------------------------------------------------------------------
Свойство display: block обозначает блочный бокс элемента, а display: inline — строчный
display со значением inline-block. Особенности элементов с блочно-строчным боксом:
- им можно задавать размеры, рамки и отступы, как и элементам с блочным боксом;
- их ширина по умолчанию зависит от содержания, а не растягивается на всю ширину контейнера;
- они не порождают принудительных переносов строк, поэтому могут располагаться на одной строке, пока помещаются в родительский контейнер;
- элементы в одной строке выравниваются вертикально подобно элементам со строчным боксом.
display: table задаёт боксу элемента тип таблица. Особенности элементов с табличным боксом:
- можно задавать ширину, высоту, рамки, отступы;
- по умолчанию ширина зависит от содержания;
- переносы строки до и после элемента.
Соответствие тегов таблицы значениям display:
<table> — display: table;
<tr> — display: table-row;
<td> — display: table-cell;
Значение none свойства display используется очень часто. С его помощью можно скрыть элемент, как будто его и не было. Скрытый элемент не отображается и не занимает места на странице.
Есть ещё одно CSS-свойство, которое используется для сокрытия элементов. Это свойство visibility со значением hidden. Оно «прячет» элемент — он становится невидимым, но занимает место на странице.
--------------------------------------------------------------------------------------------
Существует несколько способов управлять потоком и строить сетки:
- флоаты;
- инлайн-блоки;
- табличная вёрстка;
- флексбоксы.
Табличная вёрстка — самый простой для понимания способ построения сеток. Но он считается устаревшим и использовать его не рекомендуется. Сейчас уже можно использовать для такой вёрстки не таблицы, а элементы с display: table, display: table-row и display: table-cell.
--------------------------------------------------------------------------------------------
float — это свойство, включающее режим обтекания. Но, как часто бывает, судьба уготовила ему совсем другую роль.
Свойство float имеет следующие значения:
	left — прижимает элемент к левому краю родителя, другие элементы обтекают его справа;
	right — прижимает элемент к правому краю родителя, другие элементы обтекают его слева;
	none — отключает режим обтекания и возвращает элементу нормальное поведение.
Обратите внимание, что зафлоатить элемент по центру нельзя.
Зафлоаченные элементы выпадают из потока, но лишь частично:
	- Блочные элементы, которые идут в коде после зафлоаченного блока, перестают его замечать. Они подтягиваются вверх и занимают его место, как будто его и нет.
	- Строчные же элементы, расположенные в коде после зафлоаченного блока, начинают обтекать его со свободной стороны.
Такое поведение флоатов даёт интересные эффекты:
	1)Эффект прохождения сквозь блоки. Проявляется, когда зафлоаченный элемент выше, чем несколько последующих за ним блоков.	
	2)Эффект выпадания из родителя или схлопывания родителя. Проявляется тогда, когда все дочерние блоки в родителе зафлоачены. В этом случае родитель схлопывается по высоте, как будто в нём нет содержимого, а блоки выпадают из него.
http://softwaremaniacs.org/blog/2005/12/01/css-layout-float/ полная статья по float.
При использовании float могут проподать отступы, это решается добавлением внешнему элементу свойства overflow: hidden;
--------------------------------------------------------------------------------------------
применяя clear: both; к следующему элементу после элемента с float, все нахуй выравнивается!!! =-)
Свойство clear запрещает обтекание элемента другими элементами. Вот его значения:
	left — запрещено обтекание слева;
	right — запрещено обтекание справа;
	both — запрещено обтекание с обеих сторон;
	none — обтекание разрешено.
Если после флоатного элемента расположен элемент с запрещённым обтеканием, то последний опускается под флоатный.
Свойство clear учит блочные элементы «видеть» зафлоаченные.
--------------------------------------------------------------------------------------------
Борьба с выпаданием флоатов: распорки
<div class="container"> - блок-контейнер
  <div class="column1">...</div> - колонка, флоат
  <div class="column2">...</div> - колонка, флоат
  <div class="clearfix"></div> - распорка с clear:both
</div>
То есть начали добавлять после зафлоаченных колонок пустой элемент-распорку со свойством clear:both. Этот элемент видел колонки, не давал им пройти через себя, а заодно и растягивал родительский блок по высоте.
Для таких распорок прижилось специальное название класса — clearfix.
Псевдораспорка:
.clearfix::after {
  content: "";
  display: table;
  clear: both;
}