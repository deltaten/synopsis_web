 Массив, array, хранит последовательность значений и порядок этих значений важен. Объект, object, состоит из множества пар «ключ-значение», порядок этих пар не важен.
// Массив
[1, 2, 3, 4, 5]
// Объект
{month: 'june', day: 15}
// Вывод массива в консоль
console.log([1, 2, 3, 4, 5]);
// Вывод объекта в консоль
console.log({month: 'june', day: 15});

var number = 1;
// Выведет число: 1 (number)
console.log(number);
// Выведет строку: "1" (string)
console.log(number.toString());

var string = '1';
console.log(string);
// выведет строку: "1" (string)
console.log(parseInt(string, 10));
// выведет число: 1 (number)
где 10 это система счисления, в которую мы переводим число!
----------------------------------------------------------------------------------------------
Метод querySelector
Чтобы найти на странице элемент, нужно использовать метод querySelector, он ищет по селектору:
document.querySelector('селектор');
Эта инструкция состоит из двух частей. Первая часть — элемент, внутри которого будет искать JavaScript. Словом document обозначается веб-страница, к которой скрипт подключён. Неважно, как называется файл на самом деле, в JavaScript это всегда «документ». Он является элементом-родителем для любого другого элемента на странице.
Вторая часть инструкции — это то, что нужно сделать. Её называют методом.
----------------------------------------------------------------------------------------------
Методы для изменения классов
Чтобы убрать у элемента класс, нужно использовать метод classList.remove. Он убирает с элемента тот класс, который указан в скобках:
элемент.classList.remove('класс');
Чтобы добавить элементу класс, нужно использовать метод classList.add:
элемент.classList.add('класс');
Метод-переключатель classList.toggle убирает у элемента указанный класс, если он есть, и добавляет, если этого класса нет:
элемент.classList.toggle('класс');
----------------------------------------------------------------------------------------------
Свойство textContent
У каждого элемента имеется множество свойств: его размеры, цвет и так далее. Свойство textContent хранит в себе текстовое содержимое элемента. Свойствам можно присваивать новые значения:
let paragraph = document.querySelector('p');
paragraph.textContent = 'Здесь был Кекс. Мяу!';
----------------------------------------------------------------------------------------------
Свойство value
У полей ввода есть особое свойство — value. Оно хранит данные, введённые в поле. Мы можем вывести их прямо на страницу:
let input = document.querySelector('input');
paragraph.textContent = input.value;
----------------------------------------------------------------------------------------------
Обработчики событий onclick и onsubmit
JavaScript следит за всем, что происходит на странице. Клик по кнопке или отправка формы — это событие. Мы можем сказать JavaScript, что сделать, когда некое событие произойдёт. Для этого используют обработчики событий. Инструкции, которые должны будут выполниться, когда событие произойдёт, располагают между фигурных скобок.
Свойство onclick означает «по клику»:
let button = document.querySelector('button');
button.onclick = function() {
  console.log('Кнопка нажата!');
};
При каждом клике по кнопке в консоли будет появляться новое сообщение Кнопка нажата!.
За обработку отправки формы отвечает свойство onsubmit:
let form = document.querySelector('form');
form.onsubmit = function() {
  console.log('Форма отправлена!');
};
После отправки формы в консоли появится сообщение Форма отправлена!.
----------------------------------------------------------------------------------------------
Метод classList.contains
Метод classList.contains проверяет, есть ли у элемента класс:
элемент.classList.contains('класс');
Метод вернёт true (истина), если класс у элемента есть, и false (ложь), если класса нет. Значения true и false называют булевыми. Таких значений всего два.
----------------------------------------------------------------------------------------------
Метод append
элемент-родитель.append(добавляемый-элемент);
Метод append добавляет указанный в скобках элемент в конец элемента-родителя. При этом содержимое элемента-родителя не затирается. Добавлять с помощью этого метода можно и элементы, и простые строки.
----------------------------------------------------------------------------------------------
Метод createElement
document.createElement('имя тега');
Чтобы создать новый элемент на странице, к которой подключён скрипт, нужно использовать слово document. Внутри скобок в кавычках указывают элемент, который нужно создать. Например:
// Создаём новый элемент <div> и записываем его в переменную
let newElement = document.createElement('div');
Новый элемент будет доступен из скрипта, но в разметке не появится, пока мы не скажем JavaScript, где разместить новый элемент. Для этого можно использовать метод append:
// Находим элемент-родитель
let parent = document.querySelector('.parent');
// Добавляем новый элемент на страницу
parent.append(newElement);