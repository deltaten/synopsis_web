 Массив, array, хранит последовательность значений и порядок этих значений важен. Объект, object, состоит из множества пар «ключ-значение», порядок этих пар не важен.
// Массив
[1, 2, 3, 4, 5]
// Объект
{month: 'june', day: 15}
// Вывод массива в консоль
console.log([1, 2, 3, 4, 5]);
// Вывод объекта в консоль
console.log({month: 'june', day: 15});

var number = 1;
// Выведет число: 1 (number)
console.log(number);
// Выведет строку: "1" (string)
console.log(number.toString());

var string = '1';
console.log(string);
// выведет строку: "1" (string)
console.log(parseInt(string, 10));
// выведет число: 1 (number)
где 10 это система счисления, в которую мы переводим число!

----------------------------------------------------------------------------------------------

Метод querySelector
Чтобы найти на странице элемент, нужно использовать метод querySelector, он ищет по селектору:
document.querySelector('селектор');
Эта инструкция состоит из двух частей. Первая часть — элемент, внутри которого будет искать JavaScript. Словом document обозначается веб-страница, к которой скрипт подключён. Неважно, как называется файл на самом деле, в JavaScript это всегда «документ». Он является элементом-родителем для любого другого элемента на странице.
Вторая часть инструкции — это то, что нужно сделать. Её называют методом.

----------------------------------------------------------------------------------------------

Методы для изменения классов
Чтобы убрать у элемента класс, нужно использовать метод classList.remove. Он убирает с элемента тот класс, который указан в скобках:
элемент.classList.remove('класс');
Чтобы добавить элементу класс, нужно использовать метод classList.add:
элемент.classList.add('класс');
Метод-переключатель classList.toggle убирает у элемента указанный класс, если он есть, и добавляет, если этого класса нет:
элемент.classList.toggle('класс');

----------------------------------------------------------------------------------------------

Свойство textContent
У каждого элемента имеется множество свойств: его размеры, цвет и так далее. Свойство textContent хранит в себе текстовое содержимое элемента. Свойствам можно присваивать новые значения:
let paragraph = document.querySelector('p');
paragraph.textContent = 'Здесь был Кекс. Мяу!';

----------------------------------------------------------------------------------------------

Свойство value
У полей ввода есть особое свойство — value. Оно хранит данные, введённые в поле. Мы можем вывести их прямо на страницу:
let input = document.querySelector('input');
paragraph.textContent = input.value;

----------------------------------------------------------------------------------------------

Обработчики событий onclick и onsubmit
JavaScript следит за всем, что происходит на странице. Клик по кнопке или отправка формы — это событие. Мы можем сказать JavaScript, что сделать, когда некое событие произойдёт. Для этого используют обработчики событий. Инструкции, которые должны будут выполниться, когда событие произойдёт, располагают между фигурных скобок.
Свойство onclick означает «по клику»:
let button = document.querySelector('button');
button.onclick = function() {
  console.log('Кнопка нажата!');
};
При каждом клике по кнопке в консоли будет появляться новое сообщение Кнопка нажата!.
За обработку отправки формы отвечает свойство onsubmit:
let form = document.querySelector('form');
form.onsubmit = function() {
  console.log('Форма отправлена!');
};
После отправки формы в консоли появится сообщение Форма отправлена!.

----------------------------------------------------------------------------------------------

Метод classList.contains
Метод classList.contains проверяет, есть ли у элемента класс:
элемент.classList.contains('класс');
Метод вернёт true (истина), если класс у элемента есть, и false (ложь), если класса нет. Значения true и false называют булевыми. Таких значений всего два.

----------------------------------------------------------------------------------------------

Метод append
элемент-родитель.append(добавляемый-элемент);
Метод append добавляет указанный в скобках элемент в конец элемента-родителя. При этом содержимое элемента-родителя не затирается. Добавлять с помощью этого метода можно и элементы, и простые строки.

----------------------------------------------------------------------------------------------

Метод createElement
document.createElement('имя тега');
Чтобы создать новый элемент на странице, к которой подключён скрипт, нужно использовать слово document. Внутри скобок в кавычках указывают элемент, который нужно создать. Например:
// Создаём новый элемент <div> и записываем его в переменную
let newElement = document.createElement('div');
Новый элемент будет доступен из скрипта, но в разметке не появится, пока мы не скажем JavaScript, где разместить новый элемент. Для этого можно использовать метод append:
// Находим элемент-родитель
let parent = document.querySelector('.parent');
// Добавляем новый элемент на страницу
parent.append(newElement);

----------------------------------------------------------------------------------------------

Метод querySelectorAll
Метод querySelectorAll находит все элементы на странице, которые соответствуют указанному селектору, и возвращает коллекцию — набор этих элементов.
// Найдёт все абзацы на странице
let elements = document.querySelectorAll('p');
К элементу коллекции можно обращаться по индексу.
console.log(elements[0]); // Выведет первый элемент коллекции
console.log(elements[1]); // Выведет второй элемент коллекции

----------------------------------------------------------------------------------------------

Data-атрибуты
В HTML можно создавать свои собственные атрибуты. Имена таких атрибутов начинаются с префикса data-, после которого идёт любое выбранное разработчиком слово.

<div data-cat-name="Кекс">
Чтобы получить значение data-атрибута в JavaScript, используют свойство dataset, после которого указывают имя атрибута без префикса data-:

элемент.dataset.имяАтрибутаБезПрефикса
Если имя атрибута состояло из нескольких слов и в нём были дефисы, то в JavaScript его записывают в «верблюжьем» стиле (по-английски camelCase): дефисы убирают, а каждое слово, кроме первого, пишут с большой буквы.

let element = document.querySelector('div');
console.log(element.dataset.catName); // Выведет: Кекс

----------------------------------------------------------------------------------------------

Цикл for of

for (переменная of коллекция) {
  // Код, который нужно выполнить несколько раз
}

let elements = document.querySelectorAll('p'); // Находим все абзацы

for (let element of elements) {  // Создаём цикл и переменную
  console.log(element);          // Выводим элементы в консоль
}

----------------------------------------------------------------------------------------------

Обработчик событий oninput
Обработчик событий oninput (в переводе с английского это означает «при вводе») позволяет выполнять инструкции из фигурных скобок каждый раз, когда меняется значение в поле ввода. Изменением считается и добавление, и удаление символов.

// Найдём поле ввода
let textarea = document.querySelector('textarea');

// Добавим обработчик событий
textarea.oninput = function () {
  // Выведем данные из поля ввода
  console.log(textarea.value);
};

----------------------------------------------------------------------------------------------

Свойство length
Узнать длину строки можно с помощью свойства length (по-английски «длина»). Значение этого свойства равно числу символов в строке. Символами считаются не только буквы и цифры, но также пробелы и переносы строки.

let text = 'Я люблю JavaScript';
console.log(text.length); // Выведет: 18

let textarea = document.querySelector('textarea');
console.log(textarea.value); // Выведет: Кекс
console.log(textarea.value.length); // Выведет: 4

----------------------------------------------------------------------------------------------

Свойство disabled
Блокировать и разблокировать кнопку в JavaScript можно, присваивая булевы значения свойству disabled (по-английски значит «отключён») этой кнопки. Если присвоено значение true, то кнопка заблокирована, а если false — разблокирована.

let button = document.querySelector('button');

// Блокирует кнопку
button.disabled = true;

// Разблокирует кнопку
button.disabled = false;

----------------------------------------------------------------------------------------------

Обработчик событий onscroll
Чтобы отследить прокрутку, используем обработчик событий onscroll. Он срабатывает каждый раз, когда страницу прокручивают, даже если её сдвинули всего на один пиксель.

window.onscroll = function () {
  console.log('Страница прокручена');
}

----------------------------------------------------------------------------------------------

Свойство pageYOffset
Свойство pageYOffset окна браузера содержит количество пикселей, на которое пользователь прокрутил страницу по вертикали:

// Если мы на самом верху страницы
console.log(window.pageYOffset); // Выведет: 0

// Прокрутим страницу на 200px
console.log(window.pageYOffset); // Выведет: 200

----------------------------------------------------------------------------------------------

Метод scrollTo

window.scrollTo(координата-Х, координата-Y);
// Прокрутит страницу на 100px вправо и на 50px вниз
window.scrollTo(100, 50);

Если прокрутить страницу до указанных координат не получается, браузер прокрутит её так далеко, как сможет, но увеличивать страницу не будет. Если страница помещается в окно целиком и полосы прокрутки нет, то браузер проигнорирует эту инструкцию.

----------------------------------------------------------------------------------------------

Обработчик событий onchange
Обработчик событий onchange срабатывает, когда пользователь выбирает новое значение из выпадающего списка.

// Находим выпадающий список
let select = document.querySelector('select');

// Добавляем обработчик событий
select.onchange = function () {

  // Выводим в консоль новое значение
  console.log(select.value);
};
Обработчик событий onchange можно использовать с разными элементами. Например, он срабатывает, когда пользователь переключает чекбокс или радиокнопки.

----------------------------------------------------------------------------------------------












